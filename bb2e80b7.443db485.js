(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{89:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return i})),t.d(n,"toc",(function(){return l})),t.d(n,"default",(function(){return d}));var a=t(3),s=t(7),r=(t(0),t(107)),o={id:"scanvi",title:"scANVI",sidebar_label:"scANVI (scRNA-seq)"},i={unversionedId:"scanvi",id:"scanvi",isDocsHomePage:!1,title:"scANVI",description:"This page is under construction. For now, please learn more about scANVI in our user guide.",source:"@site/get_started/scanvi.md",slug:"/scanvi",permalink:"/get_started/scanvi",editUrl:"https://github.com/YosefLab/scvi-tools-site/get_started/scanvi.md",version:"current",sidebar_label:"scANVI (scRNA-seq)",sidebar:"get_started",previous:{title:"Single-cell Variational Inference",permalink:"/get_started/scvi"},next:{title:"Total Variational Inference",permalink:"/get_started/totalvi"}},l=[],c={toc:l};function d(e){var n=e.components,t=Object(s.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("p",null,"This page is under construction. For now, please learn more about scANVI in our ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.scvi-tools.org/en/stable/user_guide/index.html"}),"user guide"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'# scANVI augments scVI to transfer cell type labels\nimport anndata\nimport scvi\n\n# read data and prepare for scvi-tools\n# adata contains partially observed cell type labels in adata.obs["labels"]\n# Unknown cells have the label "Unknown"\nadata = anndata.read("my_data.h5ad")\nscvi.data.setup_anndata(adata, batch_key="batch", labels_key="labels")\nmodel = scvi.model.SCANVI(adata, "Unknown")\nmodel.train()\n\n# cell type predictions\nadata.obs["predictions"] = model.predict()\n\n# get integrated low-dimensional representation\nadata.obsm["X_scanvi"] = model.get_latent_representation()\n\n# normalized expression\nadata.layers["scanvi_norm"] = model.get_normalized_expression()\n\n# differential expression\nresults = model.differential_expression(\n    groupby="cell types",\n    group1="CD4",\n    group2="CD8"\n)\n')))}d.isMDXComponent=!0}}]);